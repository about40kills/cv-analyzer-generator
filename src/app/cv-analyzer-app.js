const CVAnalyzerApp = {  generate() {    return `<!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>CV Analyzer & Generator</title>  <script src="https://cdn.tailwindcss.com"></script>  <style>    .tab-content { display: none; }    .tab-content.active { display: block; }    .template-card {       transition: all 0.2s ease-in-out;      cursor: pointer;    }    .template-card:hover {      transform: translateY(-2px);      box-shadow: 0 8px 25px rgba(0,0,0,0.15);    }    .animate-spin {      animation: spin 1s linear infinite;    }    @keyframes spin {      to { transform: rotate(360deg); }    }  </style></head><body class="bg-gray-50">  <!-- Header -->  <header class="bg-white shadow-sm border-b">    <div class="max-w-6xl mx-auto px-4 py-6">      <div class="flex items-center justify-between">        <div>          <h1 class="text-3xl font-bold text-gray-900">CV Analyzer & Generator</h1>          <p class="text-gray-600 mt-1">Upload, analyze, and generate professional CVs</p>        </div>      </div>    </div>  </header>  <!-- Navigation Tabs -->  <nav class="bg-white border-b">    <div class="max-w-6xl mx-auto px-4">      <div class="flex space-x-8">        <button onclick="switchToTab('upload')"                 class="tab-button py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700"                 data-tab="upload">          <span class="font-medium">1. Upload CV</span>        </button>        <button onclick="switchToTab('analyze')"                 class="tab-button py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700"                 data-tab="analyze">          <span class="font-medium">2. Analysis</span>        </button>        <button onclick="switchToTab('templates')"                 class="tab-button py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700"                 data-tab="templates">          <span class="font-medium">3. Select Template</span>        </button>        <button onclick="switchToTab('generate')"                 class="tab-button py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700"                 data-tab="generate">          <span class="font-medium">4. Generate CV</span>        </button>      </div>    </div>  </nav>  <!-- Main Content -->  <main class="max-w-6xl mx-auto px-4 py-8">        <!-- Upload Tab -->    <div id="upload-tab" class="tab-content">      <div class="bg-white rounded-lg shadow-md p-8">        <div class="text-center">          <h2 class="text-2xl font-bold text-gray-900 mb-4">Upload Your CV</h2>          <p class="text-gray-600 mb-8">Upload your existing CV for analysis and optimization</p>                    <div class="border-2 border-dashed border-gray-300 rounded-lg p-12 hover:border-gray-400 transition-colors">            <input type="file" id="cv-upload" accept=".pdf,.doc,.docx" class="hidden" onchange="handleFileUpload(event)">            <label for="cv-upload" class="cursor-pointer">              <div class="text-gray-400 mb-4">                <svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />                </svg>              </div>              <p class="text-lg font-medium text-gray-900">Click to upload or drag and drop</p>              <p class="text-gray-500">PDF, DOC, or DOCX files up to 10MB</p>            </label>          </div>                    <div id="upload-status" class="mt-4 hidden">            <div class="bg-blue-50 border border-blue-200 rounded-md p-4">              <div class="flex items-center">                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-3"></div>                <p class="text-blue-700">Processing your CV...</p>              </div>            </div>          </div>                    <div class="mt-8">            <p class="text-gray-500 text-sm mb-4">Or skip upload and create a new CV from scratch</p>            <button onclick="switchToTab('templates')"                     class="bg-gray-600 text-white px-6 py-3 rounded-md hover:bg-gray-700 transition-colors">              Create New CV            </button>          </div>        </div>      </div>    </div>    <!-- Analysis Tab -->    <div id="analyze-tab" class="tab-content">      <div class="bg-white rounded-lg shadow-md p-8">        <h2 class="text-2xl font-bold text-gray-900 mb-6">CV Analysis Results</h2>                <div id="analysis-content" class="space-y-6">          <div class="text-center py-12">            <div class="text-gray-400 mb-4">              <svg class="mx-auto h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />              </svg>            </div>            <p class="text-xl text-gray-500">Upload a CV to see analysis results</p>          </div>        </div>                <div class="mt-8 text-center">          <button onclick="switchToTab('templates')"                   class="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"                  disabled>            Proceed to Template Selection          </button>        </div>      </div>    </div>    <!-- Templates Tab -->    <div id="templates-tab" class="tab-content">      <div class="bg-white rounded-lg shadow-md p-8">        <h2 class="text-2xl font-bold text-gray-900 mb-6">Choose Your CV Template</h2>                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">          <!-- Professional Template -->          <div class="template-card border-2 border-slate-200 rounded-lg p-6 hover:border-blue-500 transition-colors"               data-template="professional" onclick="selectTemplate('professional')">            <div class="flex items-start justify-between mb-4">              <div>                <h3 class="text-lg font-semibold text-gray-900">Professional</h3>                <p class="text-sm text-gray-500">Clean and corporate design</p>              </div>              <div class="w-6 h-6 border-2 border-slate-300 rounded-full flex items-center justify-center"></div>            </div>            <div class="bg-gray-100 rounded-md h-32 mb-4 flex items-center justify-center">              <span class="text-gray-400 text-sm">Template Preview</span>            </div>            <ul class="text-sm text-gray-600 space-y-1">              <li>• Traditional layout</li>              <li>• Professional colors</li>              <li>• ATS-friendly</li>            </ul>          </div>          <!-- Modern Template -->          <div class="template-card border-2 border-slate-200 rounded-lg p-6 hover:border-blue-500 transition-colors"               data-template="modern" onclick="selectTemplate('modern')">            <div class="flex items-start justify-between mb-4">              <div>                <h3 class="text-lg font-semibold text-gray-900">Modern</h3>                <p class="text-sm text-gray-500">Contemporary with subtle colors</p>              </div>              <div class="w-6 h-6 border-2 border-slate-300 rounded-full flex items-center justify-center"></div>            </div>            <div class="bg-blue-100 rounded-md h-32 mb-4 flex items-center justify-center">              <span class="text-blue-600 text-sm">Template Preview</span>            </div>            <ul class="text-sm text-gray-600 space-y-1">              <li>• Two-column layout</li>              <li>• Modern typography</li>              <li>• Professional accent colors</li>            </ul>          </div>          <!-- Creative Template -->          <div class="template-card border-2 border-slate-200 rounded-lg p-6 hover:border-blue-500 transition-colors"               data-template="creative" onclick="selectTemplate('creative')">            <div class="flex items-start justify-between mb-4">              <div>                <h3 class="text-lg font-semibold text-gray-900">Creative</h3>                <p class="text-sm text-gray-500">Bold design for creative roles</p>              </div>              <div class="w-6 h-6 border-2 border-slate-300 rounded-full flex items-center justify-center"></div>            </div>            <div class="bg-purple-100 rounded-md h-32 mb-4 flex items-center justify-center">              <span class="text-purple-600 text-sm">Template Preview</span>            </div>            <ul class="text-sm text-gray-600 space-y-1">              <li>• Visual elements</li>              <li>• Creative sections</li>              <li>• Stand-out design</li>            </ul>          </div>          <!-- Minimalist Template -->          <div class="template-card border-2 border-slate-200 rounded-lg p-6 hover:border-blue-500 transition-colors"               data-template="minimalist" onclick="selectTemplate('minimalist')">            <div class="flex items-start justify-between mb-4">              <div>                <h3 class="text-lg font-semibold text-gray-900">Minimalist</h3>                <p class="text-sm text-gray-500">Clean and simple</p>              </div>              <div class="w-6 h-6 border-2 border-slate-300 rounded-full flex items-center justify-center"></div>            </div>            <div class="bg-gray-50 rounded-md h-32 mb-4 flex items-center justify-center">              <span class="text-gray-500 text-sm">Template Preview</span>            </div>            <ul class="text-sm text-gray-600 space-y-1">              <li>• Minimal design</li>              <li>• Focus on content</li>              <li>• Clean typography</li>            </ul>          </div>          <!-- Executive Template -->          <div class="template-card border-2 border-slate-200 rounded-lg p-6 hover:border-blue-500 transition-colors"               data-template="executive" onclick="selectTemplate('executive')">            <div class="flex items-start justify-between mb-4">              <div>                <h3 class="text-lg font-semibold text-gray-900">Executive</h3>                <p class="text-sm text-gray-500">Premium design for senior roles</p>              </div>              <div class="w-6 h-6 border-2 border-slate-300 rounded-full flex items-center justify-center"></div>            </div>            <div class="bg-slate-100 rounded-md h-32 mb-4 flex items-center justify-center">              <span class="text-slate-600 text-sm">Template Preview</span>            </div>            <ul class="text-sm text-gray-600 space-y-1">              <li>• Executive styling</li>              <li>• Premium appearance</li>              <li>• Leadership focused</li>            </ul>          </div>        </div>                <div class="mt-8 text-center">          <button onclick="switchToTab('generate')"                   class="bg-blue-600 text-white px-8 py-3 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"                  disabled id="proceed-to-generate">            Proceed to Generate CV          </button>        </div>      </div>    </div>    <!-- Generate Tab -->    <div id="generate-tab" class="tab-content">      <div class="bg-white rounded-lg shadow-md p-8">        <h2 class="text-2xl font-bold text-gray-900 mb-6">Generate Your CV</h2>                <form id="cv-form" class="space-y-8">                    <!-- Personal Information -->          <div class="form-section rounded-lg p-6 bg-gray-50">            <h3 class="text-lg font-semibold text-gray-900 mb-4">Personal Information</h3>            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">              <div>                <label class="block text-sm font-medium text-gray-700 mb-1">First Name *</label>                <input type="text" name="firstName" required                        class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                       placeholder="John">              </div>              <div>                <label class="block text-sm font-medium text-gray-700 mb-1">Last Name *</label>                <input type="text" name="lastName" required                        class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                       placeholder="Doe">              </div>              <div>                <label class="block text-sm font-medium text-gray-700 mb-1">Email *</label>                <input type="email" name="email" required                        class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                       placeholder="john.doe@email.com">              </div>              <div>                <label class="block text-sm font-medium text-gray-700 mb-1">Phone *</label>                <input type="tel" name="phone" required                        class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                       placeholder="+1 (555) 123-4567">              </div>              <div>                <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>                <input type="text" name="location"                        class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                       placeholder="New York, NY">              </div>              <div>                <label class="block text-sm font-medium text-gray-700 mb-1">LinkedIn</label>                <input type="url" name="linkedin"                        class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                       placeholder="https://linkedin.com/in/johndoe">              </div>            </div>          </div>          <!-- Professional Summary -->          <div class="form-section rounded-lg p-6 bg-gray-50">            <h3 class="text-lg font-semibold text-gray-900 mb-4">Professional Summary</h3>            <textarea name="summary" rows="4"                       class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                      placeholder="Write a compelling professional summary that highlights your key achievements and career goals..."></textarea>          </div>          <!-- Work Experience -->          <div class="form-section rounded-lg p-6 bg-gray-50">            <div class="flex items-center justify-between mb-4">              <h3 class="text-lg font-semibold text-gray-900">Work Experience</h3>              <button type="button" onclick="addExperience()"                       class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors text-sm">                Add Experience +              </button>            </div>                        <div id="experience-container">              <div class="experience-item border-l-4 border-blue-200 pl-4 mb-6" data-index="0">                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">                  <div>                    <label class="block text-sm font-medium text-gray-700 mb-1">Job Title</label>                    <input type="text" name="experience[0][title]" placeholder="Software Engineer"                            class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">                  </div>                  <div>                    <label class="block text-sm font-medium text-gray-700 mb-1">Company</label>                    <input type="text" name="experience[0][company]" placeholder="Tech Company Inc."                            class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">                  </div>                </div>                <div class="mb-4">                  <label class="block text-sm font-medium text-gray-700 mb-1">Duration</label>                  <input type="text" name="experience[0][duration]" placeholder="Jan 2020 - Present"                          class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">                </div>                <div class="mb-4">                  <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>                  <textarea name="experience[0][description]" rows="3" placeholder="Key responsibilities, achievements, and technologies used..."                             class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>                </div>              </div>            </div>          </div>          <!-- Skills -->          <div class="form-section rounded-lg p-6 bg-gray-50">            <h3 class="text-lg font-semibold text-gray-900 mb-4">Skills</h3>            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">              <div>                <label class="block text-sm font-medium text-gray-700 mb-1">Technical Skills</label>                <textarea name="technicalSkills" rows="3"                           class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                          placeholder="JavaScript, Python, React, Node.js, SQL, AWS..."></textarea>              </div>              <div>                <label class="block text-sm font-medium text-gray-700 mb-1">Soft Skills</label>                <textarea name="softSkills" rows="3"                           class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"                          placeholder="Leadership, Communication, Problem-solving, Team collaboration..."></textarea>              </div>            </div>          </div>          <!-- Education -->          <div class="form-section rounded-lg p-6 bg-gray-50">            <div class="flex items-center justify-between mb-4">              <h3 class="text-lg font-semibold text-gray-900">Education</h3>              <button type="button" onclick="addEducation()"                       class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors text-sm">                Add Education +              </button>            </div>                        <div id="education-container">              <div class="education-item border-l-4 border-green-200 pl-4 mb-6" data-index="0">                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">                  <div>                    <label class="block text-sm font-medium text-gray-700 mb-1">Degree</label>                    <input type="text" name="education[0][degree]" placeholder="Bachelor of Computer Science"                            class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-green-500 focus:border-green-500">                  </div>                  <div>                    <label class="block text-sm font-medium text-gray-700 mb-1">Institution</label>                    <input type="text" name="education[0][institution]" placeholder="University Name"                            class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-green-500 focus:border-green-500">                  </div>                </div>                <div class="mb-4">                  <label class="block text-sm font-medium text-gray-700 mb-1">Year</label>                  <input type="text" name="education[0][year]" placeholder="2020"                          class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-green-500 focus:border-green-500">                </div>              </div>            </div>          </div>          <!-- Form Actions -->          <div class="flex flex-wrap gap-4 pt-6 border-t">            <button type="button" onclick="resetForm()"                     class="bg-gray-500 text-white px-6 py-3 rounded-md hover:bg-gray-600 transition-colors">              Reset Form            </button>            <button type="button" onclick="previewPDF()"                     class="bg-green-600 text-white px-6 py-3 rounded-md hover:bg-green-700 transition-colors">              Preview PDF            </button>            <button type="button" onclick="generateCV()"                     class="bg-blue-600 text-white px-8 py-3 rounded-md hover:bg-blue-700 transition-colors font-medium">              Generate & Download CV            </button>          </div>        </form>      </div>    </div>  </main>  <script>    // Global variables    let currentTab = 'upload';    let selectedTemplate = '';    let experienceCount = 1;    let educationCount = 1;    // Tab Management    function switchToTab(tabName) {      // Hide all tabs      document.querySelectorAll('.tab-content').forEach(tab => {        tab.classList.remove('active');      });            // Remove active state from all tab buttons      document.querySelectorAll('.tab-button').forEach(button => {        button.classList.remove('border-blue-500', 'text-blue-600');        button.classList.add('border-transparent', 'text-gray-500');      });            // Show selected tab      const targetTab = document.getElementById(tabName + '-tab');      if (targetTab) {        targetTab.classList.add('active');      }            // Activate selected tab button      const activeButton = document.querySelector('[data-tab="' + tabName + '"]');      if (activeButton) {        activeButton.classList.add('border-blue-500', 'text-blue-600');        activeButton.classList.remove('border-transparent', 'text-gray-500');      }            currentTab = tabName;    }    // File Upload Handler    async function handleFileUpload(event) {      const file = event.target.files[0];      if (!file) return;      document.getElementById('upload-status').classList.remove('hidden');      const formData = new FormData();      formData.append('cv', file);      try {        const response = await fetch('/api/analyze-cv', {          method: 'POST',          body: formData        });        const result = await response.json();                if (response.ok) {          displayAnalysis(result);          switchToTab('analyze');        } else {          alert('Error analyzing CV: ' + result.error);        }      } catch (error) {        console.error('Upload error:', error);        alert('Error uploading file. Please try again.');      } finally {        document.getElementById('upload-status').classList.add('hidden');      }    }    // Display Analysis Results    function displayAnalysis(analysis) {      const content = document.getElementById('analysis-content');      const strengthsList = (analysis.strengths || []).map(s => '<div class="mb-1">• ' + s + '</div>').join('') || 'No strengths identified';      const improvementsList = (analysis.improvements || []).map(i => '<div class="mb-1">• ' + i + '</div>').join('') || 'No improvements suggested';            content.innerHTML = `        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">          <div class="bg-blue-50 rounded-lg p-6">            <h3 class="font-semibold text-blue-900 mb-2">Overall Score</h3>            <div class="text-3xl font-bold text-blue-600">${analysis.overallScore || 'N/A'}</div>          </div>                    <div class="bg-green-50 rounded-lg p-6">            <h3 class="font-semibold text-green-900 mb-2">Key Strengths</h3>            <div class="text-sm text-green-700">              ${strengthsList}            </div>          </div>                    <div class="bg-orange-50 rounded-lg p-6">            <h3 class="font-semibold text-orange-900 mb-2">Improvements</h3>            <div class="text-sm text-orange-700">              ${improvementsList}            </div>          </div>        </div>                <div class="bg-gray-50 rounded-lg p-6">          <h3 class="font-semibold text-gray-900 mb-4">Detailed Feedback</h3>          <div class="prose text-gray-700">            ${analysis.detailedFeedback || 'No detailed feedback available'}          </div>        </div>      `;            // Enable proceed button      const proceedBtn = document.querySelector('#analyze-tab button');      if (proceedBtn) {        proceedBtn.disabled = false;        proceedBtn.classList.remove('opacity-50', 'cursor-not-allowed');      }    }    // Template Selection    function selectTemplate(templateId) {      selectedTemplate = templateId;            // Update visual selection      document.querySelectorAll('[data-template]').forEach(el => {        el.classList.remove('border-blue-500', 'bg-blue-50');        el.classList.add('border-slate-200');        const radio = el.querySelector('.w-6');        if (radio) {          radio.classList.remove('border-blue-500', 'bg-blue-500');          radio.classList.add('border-slate-300');          radio.innerHTML = '';        }      });            const selectedEl = document.querySelector('[data-template="' + templateId + '"]');      if (selectedEl) {        selectedEl.classList.add('border-blue-500', 'bg-blue-50');        selectedEl.classList.remove('border-slate-200');        const radio = selectedEl.querySelector('.w-6');        if (radio) {          radio.classList.add('border-blue-500', 'bg-blue-500');          radio.classList.remove('border-slate-300');          radio.innerHTML = '<div class="w-3 h-3 bg-white rounded-full"></div>';        }      }            // Enable proceed button      const proceedBtn = document.getElementById('proceed-to-generate');      if (proceedBtn) {        proceedBtn.disabled = false;        proceedBtn.classList.remove('opacity-50', 'cursor-not-allowed');      }    }    // Dynamic Experience Management    function addExperience() {      const container = document.getElementById('experience-container');      const newExperience = `        <div class="experience-item border-l-4 border-blue-200 pl-4 mb-6" data-index="${experienceCount}">          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">            <div>              <label class="block text-sm font-medium text-gray-700 mb-1">Job Title</label>              <input type="text" name="experience[${experienceCount}][title]" placeholder="Software Engineer"                      class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">            </div>            <div>              <label class="block text-sm font-medium text-gray-700 mb-1">Company</label>              <input type="text" name="experience[${experienceCount}][company]" placeholder="Tech Company Inc."                      class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">            </div>          </div>          <div class="mb-4">            <label class="block text-sm font-medium text-gray-700 mb-1">Duration</label>            <input type="text" name="experience[${experienceCount}][duration]" placeholder="Jan 2020 - Present"                    class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">          </div>          <div class="mb-4">            <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>            <textarea name="experience[${experienceCount}][description]" rows="3" placeholder="Key responsibilities, achievements, and technologies used..."                       class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>          </div>          <button type="button" onclick="removeExperience(${experienceCount})"                   class="text-red-600 hover:text-red-800 text-sm">            Remove Experience          </button>        </div>      `;      container.insertAdjacentHTML('beforeend', newExperience);      experienceCount++;    }    function removeExperience(index) {      const item = document.querySelector('.experience-item[data-index="' + index + '"]');      if (item) item.remove();    }    // Dynamic Education Management    function addEducation() {      const container = document.getElementById('education-container');      const newEducation = `        <div class="education-item border-l-4 border-green-200 pl-4 mb-6" data-index="${educationCount}">          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">            <div>              <label class="block text-sm font-medium text-gray-700 mb-1">Degree</label>              <input type="text" name="education[${educationCount}][degree]" placeholder="Bachelor of Computer Science"                      class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-green-500 focus:border-green-500">            </div>            <div>              <label class="block text-sm font-medium text-gray-700 mb-1">Institution</label>              <input type="text" name="education[${educationCount}][institution]" placeholder="University Name"                      class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-green-500 focus:border-green-500">            </div>          </div>          <div class="mb-4">            <label class="block text-sm font-medium text-gray-700 mb-1">Year</label>            <input type="text" name="education[${educationCount}][year]" placeholder="2020"                    class="w-full border border-slate-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-green-500 focus:border-green-500">          </div>          <button type="button" onclick="removeEducation(${educationCount})"                   class="text-red-600 hover:text-red-800 text-sm">            Remove Education          </button>        </div>      `;      container.insertAdjacentHTML('beforeend', newEducation);      educationCount++;    }    function removeEducation(index) {      const item = document.querySelector('.education-item[data-index="' + index + '"]');      if (item) item.remove();    }    // Form Management    async function generateCV() {      if (!selectedTemplate) {        alert('Please select a template first.');        return;      }            const form = document.getElementById('cv-form');      const formData = new FormData(form);            // Validate required fields      const requiredFields = ['firstName', 'lastName', 'email', 'phone'];      for (let i = 0; i < requiredFields.length; i++) {        const field = requiredFields[i];        if (!formData.get(field)) {          alert('Please fill in the ' + field.replace(/([A-Z])/g, ' $1').toLowerCase() + ' field.');          return;        }      }            formData.append('template', selectedTemplate);            // Show loading state      const generateBtn = event.target;      const originalText = generateBtn.innerHTML;      generateBtn.innerHTML = '<div class="inline-flex items-center"><div class="animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>Generating...</div>';      generateBtn.disabled = true;            try {        const response = await fetch('/api/generate-pdf', {          method: 'POST',          body: formData        });                if (!response.ok) {          throw new Error('PDF generation failed');        }                const blob = await response.blob();        const url = window.URL.createObjectURL(blob);                // Create download link        const a = document.createElement('a');        a.href = url;        a.download = formData.get('firstName') + '_' + formData.get('lastName') + '_CV.pdf';        document.body.appendChild(a);        a.click();        document.body.removeChild(a);        window.URL.revokeObjectURL(url);                // Clear form draft        localStorage.removeItem('cv-draft');                // Show success message        alert('Your CV has been generated and downloaded successfully!');              } catch (error) {        console.error('Error generating CV:', error);        alert('Error generating CV. Please try again.');      } finally {        // Restore button state        generateBtn.innerHTML = originalText;        generateBtn.disabled = false;      }    }    function resetForm() {      if (confirm('Are you sure you want to reset the form? All data will be lost.')) {        document.getElementById('cv-form').reset();        localStorage.removeItem('cv-draft');      }    }    function previewPDF() {      if (!selectedTemplate) {        alert('Please select a template first.');        return;      }            const formData = new FormData(document.getElementById('cv-form'));      formData.append('template', selectedTemplate);            // Open preview in new window      const previewWindow = window.open('', '_blank');      previewWindow.document.write('<html><body><h2>Generating preview...</h2></body></html>');            fetch('/api/generate-pdf', {        method: 'POST',        body: formData      })      .then(response => response.blob())      .then(blob => {        const url = window.URL.createObjectURL(blob);        previewWindow.location.href = url;      })      .catch(error => {        previewWindow.document.write('<h2>Error generating preview</h2>');        console.error('Preview error:', error);      });    }    // Auto-save functionality    function saveFormDraft() {      const formData = new FormData(document.getElementById('cv-form'));      const data = {};      for (let pair of formData.entries()) {        data[pair[0]] = pair[1];      }      localStorage.setItem('cv-draft', JSON.stringify(data));    }    function loadFormDraft() {      const draft = localStorage.getItem('cv-draft');      if (draft) {        const data = JSON.parse(draft);        const form = document.getElementById('cv-form');                for (const key in data) {          const input = form.querySelector('[name="' + key + '"]');          if (input) {            input.value = data[key];          }        }      }    }    function debounce(func, wait) {      let timeout;      return function executedFunction() {        const args = arguments;        const later = function() {          clearTimeout(timeout);          func.apply(null, args);        };        clearTimeout(timeout);        timeout = setTimeout(later, wait);      };    }    // Initialize    document.addEventListener('DOMContentLoaded', function() {      switchToTab('upload');      loadFormDraft();            // Auto-save on input changes      const form = document.getElementById('cv-form');      if (form) {        form.addEventListener('input', debounce(saveFormDraft, 500));      }    });  </script></body></html>    `;  }};module.exports = CVAnalyzerApp;